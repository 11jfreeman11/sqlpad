/*  
    NOTE

    This Config model is for interacting with the db.Config nedb database
    It does not model lib/config-items.js or lib/config.js.
    A more appropriate distinction between these things should be made 
    but I'm drawing a blank. (any ideas?)
==============================================================================*/
var Joi = require('joi');
var db = require('../lib/db.js');
var config = require('../lib/config.js');

var schema = {
    _id: Joi.string().optional(), // _id is auto generated by nedb
    key: Joi.string().required(),
    value: Joi.any().required(),
    createdDate: Joi.date().default(Date.now, 'time of creation'),
    modifiedDate: Joi.date()
}

var ConfigValue = function ConfigValue (data) {
    this.data = data;
}

ConfigValue.prototype.data = {}

ConfigValue.prototype.get = function get (key) {
    return this.data[key];
}

ConfigValue.prototype.set = function set (key, value) {
    this.data[key] = value;
}

ConfigValue.prototype.save = function save (callback) {
    var self = this;
    self.data.modifiedDate = new Date();
    var joiResult = Joi.validate(self.data, schema);
    if (joiResult.error) return callback(joiResult.error);
    config.set(self.data.key, self.data.value);
    db.config.update({key: self.data.key}, joiResult.value, {upsert: true}, callback);      
}

/*  Query methods for finding ConfigValues
==============================================================================*/
ConfigValue.findById = function (id, callback) {
    db.config.findOne({_id: id}).exec(function (err, doc) {
        if (err) return callback(err);
        if (!doc) return callback();
        return callback(err, new ConfigValue(doc));
    });
}

ConfigValue.findByKey = function (key, callback) {
    db.config.findOne({key: key}).exec(function (err, doc) {
        if (err) return callback(err);
        if (!doc) return callback();
        return callback(err, new ConfigValue(doc));
    });
}

ConfigValue.findAll = function (callback) {
    db.config.find({}).exec(function (err, docs) {
        if (err) return callback(err);
        var ConfigValues = docs.map(function(doc) {
            return new ConfigValue(doc)
        })
        callback(err, ConfigValues);
    });
}

ConfigValue._removeAll = function _removeAll (callback) {
    db.config.remove({}, {multi: true}, callback);
}

module.exports = ConfigValue;